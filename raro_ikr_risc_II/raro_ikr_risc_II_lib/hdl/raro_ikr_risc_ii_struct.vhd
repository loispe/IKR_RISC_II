--
-- VHDL Architecture raro_ikr_risc_II_lib.raro_ikr_risc_II.struct
--
-- Created:
--          by - lspetrck.meyer (pc086)
--          at - 18:07:42 05/24/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2020.2 Built on 12 Apr 2020 at 11:28:22
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY raro_ikr_risc_II_lib;
USE raro_ikr_risc_II_lib.internal_types.all;USE raro_ikr_risc_II_lib.isa_types.ALL;


ARCHITECTURE struct OF raro_ikr_risc_II IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL rALU_in        : word;
   SIGNAL rALU_out       : word;
   SIGNAL rA_in          : word;
   SIGNAL rA_out         : word;
   SIGNAL rAluMode_in    : alu_mode_type;
   SIGNAL rAluMode_out   : alu_mode_type;
   SIGNAL rB_in          : word;
   SIGNAL rB_out         : word;
   SIGNAL rC_in          : word;
   SIGNAL rC_out         : word;
   SIGNAL rME_in         : std_logic_vector(15 DOWNTO 0);
   SIGNAL rME_out        : word;
   SIGNAL rNextPC_out_ex : word;
   SIGNAL rNextPc_in_dc  : word;
   SIGNAL rOpcode_in     : word;
   SIGNAL rOpcode_out    : word;
   SIGNAL rPc_in         : word;
   SIGNAL rPc_out        : word;
   SIGNAL rStoreData_in  : word;
   SIGNAL rStoreData_out : word;
   SIGNAL targetreg_wb   : word;


   -- Component Declarations
   COMPONENT mux_init
   PORT (
      rPc_out : IN     word ;
      rPc_in  : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_dc_ex
   PORT (
      clk            : IN     std_logic ;
      rA_in          : IN     word ;
      rAluMode_in    : IN     alu_mode_type ;
      rB_in          : IN     word ;
      rC_in          : IN     word ;
      rNextPc_in_dc  : IN     word ;
      res_n          : IN     std_logic ;
      rA_out         : OUT    word ;
      rAluMode_out   : OUT    alu_mode_type ;
      rB_out         : OUT    word ;
      rC_out         : OUT    word ;
      rNextPC_out_ex : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_if_dc
   PORT (
      clk           : IN     std_logic ;
      rOpcode_in    : IN     word ;
      rPc_in        : IN     word ;
      res_n         : IN     std_logic ;
      rNextPc_in_dc : OUT    word ;
      rOpcode_out   : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_me_wb
   PORT (
      rME_in       : IN     std_logic_vector (15 DOWNTO 0);
      rME_out      : OUT    word;
      targetreg_wb : OUT    word
   );
   END COMPONENT;
   COMPONENT reg_mx_me
   PORT (
      clk            : IN     std_logic ;
      rALU_in        : IN     word ;
      rStoreData_in  : IN     word ;
      res_n          : IN     std_logic ;
      rALU_out       : OUT    word ;
      rStoreData_out : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_pc
   PORT (
      clk     : IN     std_logic ;
      rPc_in  : IN     word ;
      res_n   : IN     std_logic ;
      rPc_out : OUT    word 
   );
   END COMPONENT;
   COMPONENT step_dc
   PORT (
      clk          : IN     std_logic ;
      rME_out      : IN     word ;
      rOpcode_out  : IN     word ;
      res_n        : IN     std_logic ;
      targetreg_wb : IN     word ;
      rA_in        : OUT    word ;
      rAluMode_in  : OUT    alu_mode_type ;
      rB_in        : OUT    word ;
      rC_in        : OUT    word 
   );
   END COMPONENT;
   COMPONENT step_ex
   PORT (
      rA_out         : IN     word ;
      rAluMode_out   : IN     alu_mode_type ;
      rB_out         : IN     word ;
      rC_out         : IN     word ;
      rNextPC_out_ex : IN     word ;
      rALU_in        : OUT    word ;
      rStoreData_in  : OUT    word 
   );
   END COMPONENT;
   COMPONENT step_if
   PORT (
      rPc_out    : IN     word ;
      rOpcode_in : OUT    word 
   );
   END COMPONENT;
   COMPONENT step_me
   PORT (
      rALU_out       : IN     word;
      rStoreData_out : IN     word;
      rME_in         : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : mux_init USE ENTITY raro_ikr_risc_II_lib.mux_init;
   FOR ALL : reg_dc_ex USE ENTITY raro_ikr_risc_II_lib.reg_dc_ex;
   FOR ALL : reg_if_dc USE ENTITY raro_ikr_risc_II_lib.reg_if_dc;
   FOR ALL : reg_me_wb USE ENTITY raro_ikr_risc_II_lib.reg_me_wb;
   FOR ALL : reg_mx_me USE ENTITY raro_ikr_risc_II_lib.reg_mx_me;
   FOR ALL : reg_pc USE ENTITY raro_ikr_risc_II_lib.reg_pc;
   FOR ALL : step_dc USE ENTITY raro_ikr_risc_II_lib.step_dc;
   FOR ALL : step_ex USE ENTITY raro_ikr_risc_II_lib.step_ex;
   FOR ALL : step_if USE ENTITY raro_ikr_risc_II_lib.step_if;
   FOR ALL : step_me USE ENTITY raro_ikr_risc_II_lib.step_me;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : mux_init
      PORT MAP (
         rPc_out => rPc_out,
         rPc_in  => rPc_in
      );
   U_6 : reg_dc_ex
      PORT MAP (
         clk            => clk,
         rA_in          => rA_in,
         rAluMode_in    => rAluMode_in,
         rB_in          => rB_in,
         rC_in          => rC_in,
         rNextPc_in_dc  => rNextPc_in_dc,
         res_n          => res_n,
         rA_out         => rA_out,
         rAluMode_out   => rAluMode_out,
         rB_out         => rB_out,
         rC_out         => rC_out,
         rNextPC_out_ex => rNextPC_out_ex
      );
   U_4 : reg_if_dc
      PORT MAP (
         clk           => clk,
         rOpcode_in    => rOpcode_in,
         rPc_in        => rPc_in,
         res_n         => res_n,
         rNextPc_in_dc => rNextPc_in_dc,
         rOpcode_out   => rOpcode_out
      );
   U_11 : reg_me_wb
      PORT MAP (
         rME_in       => rME_in,
         rME_out      => rME_out,
         targetreg_wb => targetreg_wb
      );
   U_8 : reg_mx_me
      PORT MAP (
         clk            => clk,
         rALU_in        => rALU_in,
         rStoreData_in  => rStoreData_in,
         res_n          => res_n,
         rALU_out       => rALU_out,
         rStoreData_out => rStoreData_out
      );
   U_2 : reg_pc
      PORT MAP (
         clk     => clk,
         rPc_in  => rPc_in,
         res_n   => res_n,
         rPc_out => rPc_out
      );
   U_5 : step_dc
      PORT MAP (
         clk          => clk,
         rME_out      => rME_out,
         rOpcode_out  => rOpcode_out,
         res_n        => res_n,
         targetreg_wb => targetreg_wb,
         rA_in        => rA_in,
         rAluMode_in  => rAluMode_in,
         rB_in        => rB_in,
         rC_in        => rC_in
      );
   U_7 : step_ex
      PORT MAP (
         rA_out         => rA_out,
         rAluMode_out   => rAluMode_out,
         rB_out         => rB_out,
         rC_out         => rC_out,
         rNextPC_out_ex => rNextPC_out_ex,
         rALU_in        => rALU_in,
         rStoreData_in  => rStoreData_in
      );
   U_3 : step_if
      PORT MAP (
         rPc_out    => rPc_out,
         rOpcode_in => rOpcode_in
      );
   U_9 : step_me
      PORT MAP (
         rALU_out       => rALU_out,
         rStoreData_out => rStoreData_out,
         rME_in         => rME_in
      );

END struct;
