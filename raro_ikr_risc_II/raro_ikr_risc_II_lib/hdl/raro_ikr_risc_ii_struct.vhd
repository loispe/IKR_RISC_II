--
-- VHDL Architecture raro_ikr_risc_II_lib.raro_ikr_risc_II.struct
--
-- Created:
--          by - lspetrck.meyer (pc091)
--          at - 18:37:10 05/11/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2020.2 Built on 12 Apr 2020 at 11:28:22
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY raro_ikr_risc_II_lib;
USE raro_ikr_risc_II_lib.internal_types.all;


ARCHITECTURE struct OF raro_ikr_risc_II IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dc_inOut_rNextPc  : word;
   SIGNAL dc_in_rOpcode     : word;
   SIGNAL dc_out_rOpcode    : word;
   SIGNAL ex_in_ra          : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_in_rb          : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_in_rc          : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_out_nextPc     : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_out_ra         : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_out_rb         : std_logic_vector(15 DOWNTO 0);
   SIGNAL ex_out_rc         : std_logic_vector(15 DOWNTO 0);
   SIGNAL if_in_rPc         : word;
   SIGNAL if_out_rPc        : word;
   SIGNAL me_in_rALUout     : std_logic_vector(15 DOWNTO 0);
   SIGNAL me_in_rStoreData  : std_logic_vector(15 DOWNTO 0);
   SIGNAL me_out_rALUout    : std_logic_vector(15 DOWNTO 0);
   SIGNAL me_out_rStoreData : std_logic_vector(15 DOWNTO 0);
   SIGNAL wb_in_rMEout      : std_logic_vector(15 DOWNTO 0);
   SIGNAL wb_out_sDc        : std_logic_vector(15 DOWNTO 0);


   -- Component Declarations
   COMPONENT mux_init
   PORT (
      if_out_rPc : IN     word ;
      if_in_rPc  : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_dc
   PORT (
      clk              : IN     std_logic ;
      dc_in_rOpcode    : IN     word ;
      if_in_rPc        : IN     word ;
      res_n            : IN     std_logic ;
      dc_inOut_rNextPc : OUT    word ;
      dc_out_rOpcode   : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_ex
   PORT (
      dc_inOut_rNextPc : IN     word;
      ex_in_ra         : IN     std_logic_vector (15 DOWNTO 0);
      ex_in_rb         : IN     std_logic_vector (15 DOWNTO 0);
      ex_in_rc         : IN     std_logic_vector (15 DOWNTO 0);
      ex_out_nextPc    : OUT    std_logic_vector (15 DOWNTO 0);
      ex_out_ra        : OUT    std_logic_vector (15 DOWNTO 0);
      ex_out_rb        : OUT    std_logic_vector (15 DOWNTO 0);
      ex_out_rc        : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg_if
   PORT (
      clk        : IN     std_logic ;
      if_in_rPc  : IN     word ;
      res_n      : IN     std_logic ;
      if_out_rPc : OUT    word 
   );
   END COMPONENT;
   COMPONENT reg_me
   PORT (
      me_in_rALUout     : IN     std_logic_vector (15 DOWNTO 0);
      me_in_rStoreData  : IN     std_logic_vector (15 DOWNTO 0);
      me_out_rALUout    : OUT    std_logic_vector (15 DOWNTO 0);
      me_out_rStoreData : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg_wb
   PORT (
      wb_in_rMEout : IN     std_logic_vector (15 DOWNTO 0);
      wb_out_sDc   : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT step_dc
   PORT (
      wb_out_sDc : IN     std_logic_vector (15 DOWNTO 0);
      ex_in_ra   : OUT    std_logic_vector (15 DOWNTO 0);
      ex_in_rb   : OUT    std_logic_vector (15 DOWNTO 0);
      ex_in_rc   : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT step_ex
   PORT (
      ex_out_nextPc    : IN     std_logic_vector (15 DOWNTO 0);
      ex_out_ra        : IN     std_logic_vector (15 DOWNTO 0);
      ex_out_rb        : IN     std_logic_vector (15 DOWNTO 0);
      ex_out_rc        : IN     std_logic_vector (15 DOWNTO 0);
      me_in_rALUout    : OUT    std_logic_vector (15 DOWNTO 0);
      me_in_rStoreData : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT step_if
   PORT (
      if_out_rPc    : IN     word ;
      dc_in_rOpcode : OUT    word 
   );
   END COMPONENT;
   COMPONENT step_me
   PORT (
      me_out_rALUout    : IN     std_logic_vector (15 DOWNTO 0);
      me_out_rStoreData : IN     std_logic_vector (15 DOWNTO 0);
      wb_in_rMEout      : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : mux_init USE ENTITY raro_ikr_risc_II_lib.mux_init;
   FOR ALL : reg_dc USE ENTITY raro_ikr_risc_II_lib.reg_dc;
   FOR ALL : reg_ex USE ENTITY raro_ikr_risc_II_lib.reg_ex;
   FOR ALL : reg_if USE ENTITY raro_ikr_risc_II_lib.reg_if;
   FOR ALL : reg_me USE ENTITY raro_ikr_risc_II_lib.reg_me;
   FOR ALL : reg_wb USE ENTITY raro_ikr_risc_II_lib.reg_wb;
   FOR ALL : step_dc USE ENTITY raro_ikr_risc_II_lib.step_dc;
   FOR ALL : step_ex USE ENTITY raro_ikr_risc_II_lib.step_ex;
   FOR ALL : step_if USE ENTITY raro_ikr_risc_II_lib.step_if;
   FOR ALL : step_me USE ENTITY raro_ikr_risc_II_lib.step_me;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : mux_init
      PORT MAP (
         if_out_rPc => if_out_rPc,
         if_in_rPc  => if_in_rPc
      );
   U_4 : reg_dc
      PORT MAP (
         clk              => clk,
         dc_in_rOpcode    => dc_in_rOpcode,
         if_in_rPc        => if_in_rPc,
         res_n            => res_n,
         dc_inOut_rNextPc => dc_inOut_rNextPc,
         dc_out_rOpcode   => dc_out_rOpcode
      );
   U_6 : reg_ex
      PORT MAP (
         dc_inOut_rNextPc => dc_inOut_rNextPc,
         ex_in_ra         => ex_in_ra,
         ex_in_rb         => ex_in_rb,
         ex_in_rc         => ex_in_rc,
         ex_out_nextPc    => ex_out_nextPc,
         ex_out_ra        => ex_out_ra,
         ex_out_rb        => ex_out_rb,
         ex_out_rc        => ex_out_rc
      );
   U_2 : reg_if
      PORT MAP (
         clk        => clk,
         if_in_rPc  => if_in_rPc,
         res_n      => res_n,
         if_out_rPc => if_out_rPc
      );
   U_8 : reg_me
      PORT MAP (
         me_in_rALUout     => me_in_rALUout,
         me_in_rStoreData  => me_in_rStoreData,
         me_out_rALUout    => me_out_rALUout,
         me_out_rStoreData => me_out_rStoreData
      );
   U_11 : reg_wb
      PORT MAP (
         wb_in_rMEout => wb_in_rMEout,
         wb_out_sDc   => wb_out_sDc
      );
   U_5 : step_dc
      PORT MAP (
         wb_out_sDc => wb_out_sDc,
         ex_in_ra   => ex_in_ra,
         ex_in_rb   => ex_in_rb,
         ex_in_rc   => ex_in_rc
      );
   U_7 : step_ex
      PORT MAP (
         ex_out_nextPc    => ex_out_nextPc,
         ex_out_ra        => ex_out_ra,
         ex_out_rb        => ex_out_rb,
         ex_out_rc        => ex_out_rc,
         me_in_rALUout    => me_in_rALUout,
         me_in_rStoreData => me_in_rStoreData
      );
   U_3 : step_if
      PORT MAP (
         if_out_rPc    => if_out_rPc,
         dc_in_rOpcode => dc_in_rOpcode
      );
   U_9 : step_me
      PORT MAP (
         me_out_rALUout    => me_out_rALUout,
         me_out_rStoreData => me_out_rStoreData,
         wb_in_rMEout      => wb_in_rMEout
      );

END struct;
